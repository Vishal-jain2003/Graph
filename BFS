import java.util.LinkedList;
import java.util.Queue;

public class adjlist {
  private int V;
  private int E;
  private LinkedList<Integer>[] adj;
  public adjlist(int nodes)
  {
    this.V= nodes;
    this.E=0;
    this.adj=new LinkedList[nodes];
    for (int i=0;i<nodes;i++)
    {
      this.adj[i]=new LinkedList<>();
    }
  }

  public void addEdge(int u,int v)
  {
    adj[u].add(v);
    adj[v].add(u);
    E++;
  }

  public String toString()
  {
    StringBuilder sb = new StringBuilder();
    sb.append(V + " vertices , " + E + "edges " + "\n" );
    for (int v=0;v<V;v++)
    {
      sb.append(v + ": ");
      for (int w:adj[v])
      {
        sb.append(w + " ");
      }
      sb.append("\n");
    }
    return sb.toString();
  }

  public void bfs(int s)
  {
    boolean[] visited = new boolean[V];
    Queue<Integer>q = new LinkedList<>();
    visited[s]=true;
    q.add(s);
    while (!q.isEmpty())
    {
      int u = q.remove();
      System.out.print(u + " ");
      // check neighbours also
      for (int v:adj[u])
      {
        if (!visited[v])
        {
          visited[v]=true;
          q.add(v);
        }
      }
    }
    System.out.println();
  }
public static void main(String[] args)
{
  adjlist g = new adjlist(5);
  g.addEdge(0, 1);
  g.addEdge(1, 2);
  g.addEdge(2, 3);
  g.addEdge(3, 0);
  g.addEdge(2, 4);
  System.out.println(g);
  g.bfs(0);
  

}

  
}
